# Trigger the pipeline on changes to the master branch
trigger:
- master

# Run the pipeline for pull requests targeting the master branch
pr:
- master

# Use the latest Windows-based virtual machine image for the build
pool:
  vmImage: 'windows-latest'

# Define variables for the solution file, build platform, and build configuration
variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  vstsFeedPath: $(VSTS_FEED)

# Install the specified version of NuGet (if not already installed)
steps:
- task: NuGetToolInstaller@1

# Use .NET Core SDK 8.0.x or higher
- task: UseDotNet@2
  displayName: 'Use .NET Core sdk 8.0.x'
  inputs:
    version: 8.0.x

# Restore NuGet packages for the solution using the specified feed
- task: NuGetCommand@2
  name: NugetRestore
  inputs:
    command: 'restore'
    restoreSolution: '**/*.sln'
    feedsToUse: 'select'
    vstsFeed: '$(vstsFeedPath)'

# Build the solution using MSBuild with specific arguments for packaging
- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# Run unit tests for the project and collect code coverage in Cobertura format without building
- task: DotNetCoreCLI@2
  displayName: 'Run Unit Tests'
  inputs:
    command: 'test'
    projects: '**/*Tests.csproj'
    arguments: '--no-build --configuration $(buildConfiguration) --collect:"XPlat Code Coverage"'

# Publish code coverage results using the Cobertura format and fail if no coverage results are found
- task: PublishCodeCoverageResults@2
  displayName: 'Publish Code Coverage Results'
  inputs:  
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Agent.TempDirectory)/**/*.cobertura.xml'
    failIfCoverageEmpty: true

# Publish the build artifacts to the specified location
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(build.artifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
